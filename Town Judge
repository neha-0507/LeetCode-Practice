# BRUTE FORCE SOLUTION
class Solution:
    def findJudge(self, N: int, trust: List[List[int]]) -> int:
        dict={}
        for i in range(len(trust)):
            if trust[i][0] not in dict.keys():
                dict[trust[i][0]]=[trust[i][1]]
            else:
                dict[trust[i][0]].append(trust[i][1])
        for i in range(1,N+1):
            count=0
            if i not in dict.keys():
                c=i
                for values in dict.values():
                    if c in values:
                        count+=1
            if(count==N-1):
                return c
        
        return -1
   
  # GRAPH SOLUTION
  class Solution:
    def findJudge(self, N: int, trust: List[List[int]]) -> int:
        indegree=[0]*N
        for i in range(len(trust)):
            temp=trust[i][0]
            trusted=trust[i][1]
            indegree[temp-1]-=1
            indegree[trusted-1]+=1
        for i in range(len(indegree)):
            if indegree[i]==N-1:
                return i+1
        return -1
            
